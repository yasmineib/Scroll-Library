/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
//    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'

    //sql database dependency
    implementation 'org.xerial:sqlite-jdbc:3.43.0.0'

    //This is to facilitate testing
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'

    // bcrypt dependency
    implementation 'org.mindrot:jbcrypt:0.4'
}

// Apply a specific Java toolchain to ease working on different environments.
//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(17)
//    }
//}

application {
    // Define the main class for the application.
    mainClass = 'project.App'
}

//tasks.named('test') {
//    // Use JUnit Platform for unit tests.
//    useJUnitPlatform()
//}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    destinationDir = file("build/docs/javadoc")
    title = 'SOF2412 Assignment 2 Javadoc'
}

//to accept input from system.in
run {
    standardInput = System.in
}


test {
    //java.srcDirs = ['src/test/java/soft2412_a1']
    finalizedBy jacocoTestReport // report is always generated after tests run
    useJUnitPlatform()

    testLogging {
        events "standardOut", "standardError"
    }

}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
    }
    dependsOn test // tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["java/org/mindrot/jbcrypt/*"])
        }))
    }
}

jacoco {
    toolVersion = "0.8.7"
}

build.dependsOn jacocoTestReport
jacocoTestCoverageVerification.dependsOn jacocoTestReport
